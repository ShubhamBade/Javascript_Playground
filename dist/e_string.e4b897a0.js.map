{"version":3,"sources":["topics/e_string.js"],"names":["str","console","log","str2","str3","String","str4","str5","str6","_typeof","mystring","length","slice","substring","substr","toLowerCase","toUpperCase","replace","replaceAll","concat","trim","trimStart","trimEnd","charAt","split","indexOf","lastIndexOf","search","includes","match","matchAll","startsWith","endsWith"],"mappings":"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","file":"e_string.e4b897a0.js","sourceRoot":"..\\src","sourcesContent":["// javascript string \r\n\r\nlet str=\"Javascript string\" // we can define string with \"\" and ''\r\nconsole.log(str)\r\n\r\n// Escape character in string\r\n\r\nlet str2=\"Welcome to \\\"Javascript\\\" string\" // we can use \\' and \\\\ as well\r\nconsole.log(str2)\r\n\r\n// we can say string as object\r\nlet str3=new String(\"New String object\") //[] of characters\r\nconsole.log(str3)\r\nlet str4=\"New String object\"\r\nconsole.log(str3==str4, str3===str4) // true false\r\n\r\nlet str5=new String(\"hello\")\r\nlet str6=new String(\"hello\")\r\nconsole.log(str5==str6, typeof str5, typeof str6) // js never compare object\r\n\r\n\r\n// javascript methods\r\nlet mystring=\"  Welcome to Javascript World  \"\r\nconsole.log(mystring.length)\r\n\r\nconsole.log(mystring.slice(0,10)) // return string with start and end index\r\nconsole.log(mystring.slice(-5)) // output as rld - count from last\r\nconsole.log(mystring.substring(0,10)) // The difference is that start and end values less than 0 are treated as 0 in substring().\r\nconsole.log(mystring.substring(-7)) // trurn whole string\r\nconsole.log(mystring.substr(15,5)) // (from, length) \r\n\r\nconsole.log(mystring.toLowerCase(),mystring.toUpperCase())\r\n\r\nconsole.log(mystring.replace(\"Welcome\",\"world\")) // case sensative exact match\r\nconsole.log(mystring.replaceAll(\"W\",\"#\"))\r\nconsole.log(mystring.replace(/we/i,\"##\")) // matching with regex //i-case insenative\r\n\r\nconsole.log(mystring.concat(\"####\",\"$$$$$$\")) //concat two or more strings\r\n\r\nconsole.log(mystring.trim()) // removes white spaces from both end \r\nconsole.log(mystring.trimStart())// remove from start\r\nconsole.log(mystring.trimEnd())// remove from end\r\n\r\nconsole.log(mystring.charAt(10)) // return charatcter present at provided index\r\nconsole.log(mystring.split(\" \")) // return array based on seprator\r\n\r\n//string serach methods\r\n\r\nconsole.log(mystring.indexOf(\"a\")) // if not found retun -1 nd also take sencond parameter as start index\r\nconsole.log(mystring.lastIndexOf(\"a\"))\r\n\r\nconsole.log(mystring.search(\"o\")) // searches for a string and return index\r\nconsole.log(mystring.search(/Java/)) // also take regex\r\nconsole.log(mystring.includes(\"Java\")) // true or false - based on search\r\n\r\nconsole.log(mystring.match(\"e\")) //returns an array containing the results of matching a string against a string\r\nconsole.log(mystring.matchAll(\"W\")) //return iterator\r\n\r\nconsole.log(mystring.startsWith(\" \")) //true or false\r\nconsole.log(mystring.endsWith(\"World\"))\r\n\r\n\r\n"]}